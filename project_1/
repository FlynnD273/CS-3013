CLOCK_GETRES(2)                               Linux Programmer's Manual                               CLOCK_GETRES(2)

NNAAMMEE
       clock_getres, clock_gettime, clock_settime - clock and time functions

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ttiimmee..hh>>

       iinntt cclloocckk__ggeettrreess((cclloocckkiidd__tt _c_l_k___i_d,, ssttrruucctt ttiimmeessppeecc **_r_e_s));;

       iinntt cclloocckk__ggeettttiimmee((cclloocckkiidd__tt _c_l_k___i_d,, ssttrruucctt ttiimmeessppeecc **_t_p));;

       iinntt cclloocckk__sseettttiimmee((cclloocckkiidd__tt _c_l_k___i_d,, ccoonnsstt ssttrruucctt ttiimmeessppeecc **_t_p));;

       Link with _-_l_r_t (only for glibc versions before 2.17).

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       cclloocckk__ggeettrreess(), cclloocckk__ggeettttiimmee(), cclloocckk__sseettttiimmee():
              _POSIX_C_SOURCE >= 199309L

DDEESSCCRRIIPPTTIIOONN
       The  function  cclloocckk__ggeettrreess()  finds  the resolution (precision) of the specified clock _c_l_k___i_d, and, if _r_e_s is
       non-NULL, stores it in the _s_t_r_u_c_t _t_i_m_e_s_p_e_c pointed to by _r_e_s.  The resolution of clocks depends on the  imple‐
       mentation  and  cannot be configured by a particular process.  If the time value pointed to by the argument _t_p
       of cclloocckk__sseettttiimmee() is not a multiple of _r_e_s, then it is truncated to a multiple of _r_e_s.

       The functions cclloocckk__ggeettttiimmee() and cclloocckk__sseettttiimmee() retrieve and set the time of the specified clock _c_l_k___i_d.

       The _r_e_s and _t_p arguments are _t_i_m_e_s_p_e_c structures, as specified in _<_t_i_m_e_._h_>:

           struct timespec {
               time_t   tv_sec;        /* seconds */
               long     tv_nsec;       /* nanoseconds */
           };

       The _c_l_k___i_d argument is the identifier of the particular clock on which to act.  A clock may be system-wide and
       hence visible for all processes, or per-process if it measures time only within a single process.

       All  implementations support the system-wide real-time clock, which is identified by CCLLOOCCKK__RREEAALLTTIIMMEE.  Its time
       represents seconds and nanoseconds since the Epoch.  When its time is changed, timers for a relative  interval
       are unaffected, but timers for an absolute point in time are affected.

       More  clocks may be implemented.  The interpretation of the corresponding time values and the effect on timers
       is unspecified.

       Sufficiently recent versions of glibc and the Linux kernel support the following clocks:

       CCLLOOCCKK__RREEAALLTTIIMMEE
              System-wide clock that measures real (i.e., wall-clock) time.  Setting this clock requires  appropriate
              privileges.   This clock is affected by discontinuous jumps in the system time (e.g., if the system ad‐
              ministrator manually changes the clock), and by the incremental adjustments performed by aaddjjttiimmee(3) and
              NTP.

       CCLLOOCCKK__RREEAALLTTIIMMEE__CCOOAARRSSEE (since Linux 2.6.32; Linux-specific)
              A faster but less precise version of CCLLOOCCKK__RREEAALLTTIIMMEE.  Use when you need very fast, but not fine-grained
              timestamps.  Requires per-architecture support, and probably also architecture support for this flag in
              the vvddssoo(7).

       CCLLOOCCKK__MMOONNOOTTOONNIICC
              Clock  that  cannot  be set and represents monotonic time since—as described by POSIX—"some unspecified
              point in the past".  On Linux, that point corresponds to the number of seconds that the system has been
              running since it was booted.

              The  CCLLOOCCKK__MMOONNOOTTOONNIICC clock is not affected by discontinuous jumps in the system time (e.g., if the sys‐
              tem administrator manually changes the clock), but is affected by the incremental adjustments performed
              by aaddjjttiimmee(3) and NTP.  This clock does not count time that the system is suspended.

       CCLLOOCCKK__MMOONNOOTTOONNIICC__CCOOAARRSSEE (since Linux 2.6.32; Linux-specific)
              A  faster  but  less  precise  version  of CCLLOOCCKK__MMOONNOOTTOONNIICC.  Use when you need very fast, but not fine-
              grained timestamps.  Requires per-architecture support, and probably also architecture support for this
              flag in the vvddssoo(7).

       CCLLOOCCKK__MMOONNOOTTOONNIICC__RRAAWW (since Linux 2.6.28; Linux-specific)
              Similar to CCLLOOCCKK__MMOONNOOTTOONNIICC, but provides access to a raw hardware-based time that is not subject to NTP
              adjustments or the incremental adjustments performed by aaddjjttiimmee(3).  This clock  does  not  count  time
              that the system is suspended.

       CCLLOOCCKK__BBOOOOTTTTIIMMEE (since Linux 2.6.39; Linux-specific)
              Identical  to CCLLOOCCKK__MMOONNOOTTOONNIICC, except it also includes any time that the system is suspended.  This al‐
              lows applications to get a suspend-aware monotonic clock without having to deal with the  complications
              of CCLLOOCCKK__RREEAALLTTIIMMEE, which may have discontinuities if the time is changed using sseettttiimmeeooffddaayy(2) or simi‐
              lar.

       CCLLOOCCKK__PPRROOCCEESSSS__CCPPUUTTIIMMEE__IIDD (since Linux 2.6.12)
              Per-process CPU-time clock (measures CPU time consumed by all threads in the process).

       CCLLOOCCKK__TTHHRREEAADD__CCPPUUTTIIMMEE__IIDD (since Linux 2.6.12)
              Thread-specific CPU-time clock.

RREETTUURRNN VVAALLUUEE
       cclloocckk__ggeettttiimmee(), cclloocckk__sseettttiimmee(), and cclloocckk__ggeettrreess() return 0 for success, or -1 for failure  (in  which  case
       _e_r_r_n_o is set appropriately).

EERRRROORRSS
       EEFFAAUULLTT _t_p points outside the accessible address space.

       EEIINNVVAALL The _c_l_k___i_d specified is not supported on this system.

       EEIINNVVAALL (cclloocckk__sseettttiimmee()): _t_p_._t_v___s_e_c is negative or _t_p_._t_v___n_s_e_c is outside the range [0..999,999,999].

       EEIINNVVAALL (since Linux 4.3)
              A  call  to  cclloocckk__sseettttiimmee()  with a _c_l_k___i_d of CCLLOOCCKK__RREEAALLTTIIMMEE attempted to set the time to a value less
              than the current value of the CCLLOOCCKK__MMOONNOOTTOONNIICC clock.

       EEPPEERRMM  cclloocckk__sseettttiimmee() does not have permission to set the clock indicated.

VVEERRSSIIOONNSS
       These system calls first appeared in Linux 2.6.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌─────────────────────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee                        │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├─────────────────────────────────┼───────────────┼─────────┤
       │cclloocckk__ggeettrreess(), cclloocckk__ggeettttiimmee(), │ Thread safety │ MT-Safe │
       │cclloocckk__sseettttiimmee()                  │               │         │
       └─────────────────────────────────┴───────────────┴─────────┘

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SUSv2.

AAVVAAIILLAABBIILLIITTYY
       On  POSIX systems on which these functions are available, the symbol __PPOOSSIIXX__TTIIMMEERRSS is defined in _<_u_n_i_s_t_d_._h_> to
       a value greater than 0.  The symbols __PPOOSSIIXX__MMOONNOOTTOONNIICC__CCLLOOCCKK,  __PPOOSSIIXX__CCPPUUTTIIMMEE,  __PPOOSSIIXX__TTHHRREEAADD__CCPPUUTTIIMMEE  indicate
       that CCLLOOCCKK__MMOONNOOTTOONNIICC, CCLLOOCCKK__PPRROOCCEESSSS__CCPPUUTTIIMMEE__IIDD, CCLLOOCCKK__TTHHRREEAADD__CCPPUUTTIIMMEE__IIDD are available.  (See also ssyyssccoonnff(3).)

NNOOTTEESS
       POSIX.1 specifies the following:

              Setting  the value of the CCLLOOCCKK__RREEAALLTTIIMMEE clock via cclloocckk__sseettttiimmee() shall have no effect on threads that
              are blocked waiting for a relative time service based upon this clock, including the nnaannoosslleeeepp()  func‐
              tion;  nor  on  the expiration of relative timers based upon this clock.  Consequently, these time ser‐
              vices shall expire when the requested relative interval elapses, independently of the new or old  value
              of the clock.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       On some architectures, an implementation of cclloocckk__ggeettttiimmee() is provided in the vvddssoo(7).

   HHiissttoorriiccaall nnoottee ffoorr SSMMPP ssyysstteemmss
       Before  Linux added kernel support for CCLLOOCCKK__PPRROOCCEESSSS__CCPPUUTTIIMMEE__IIDD and CCLLOOCCKK__TTHHRREEAADD__CCPPUUTTIIMMEE__IIDD, glibc implemented
       these clocks on many platforms using timer registers from the CPUs (TSC on i386, AR.ITC  on  Itanium).   These
       registers  may  differ between CPUs and as a consequence these clocks may return bboogguuss rreessuullttss if a process is
       migrated to another CPU.

       If the CPUs in an SMP system have different clock sources, then there is no way to maintain a correlation  be‐
       tween  the  timer  registers  since each CPU will run at a slightly different frequency.  If that is the case,
       then _c_l_o_c_k___g_e_t_c_p_u_c_l_o_c_k_i_d_(_0_) will return EENNOOEENNTT to signify this condition.  The two clocks will then be  useful
       only if it can be ensured that a process stays on a certain CPU.

       The  processors  in  an SMP system do not start all at exactly the same time and therefore the timer registers
       are typically running at an offset.  Some architectures include code that attempts to limit these  offsets  on
       bootup.   However,  the code cannot guarantee to accurately tune the offsets.  Glibc contains no provisions to
       deal with these offsets (unlike the Linux Kernel).  Typically these offsets are small and  therefore  the  ef‐
       fects may be negligible in most cases.

       Since  glibc  2.4,  the wrapper functions for the system calls described in this page avoid the abovementioned
       problems by employing the kernel implementation of CCLLOOCCKK__PPRROOCCEESSSS__CCPPUUTTIIMMEE__IIDD  and  CCLLOOCCKK__TTHHRREEAADD__CCPPUUTTIIMMEE__IIDD,  on
       systems that provide such an implementation (i.e., Linux 2.6.12 and later).

BBUUGGSS
       According  to  POSIX.1-2001,  a process with "appropriate privileges" may set the CCLLOOCCKK__PPRROOCCEESSSS__CCPPUUTTIIMMEE__IIDD and
       CCLLOOCCKK__TTHHRREEAADD__CCPPUUTTIIMMEE__IIDD clocks using cclloocckk__sseettttiimmee().  On Linux, these  clocks  are  not  settable  (i.e.,  no
       process has "appropriate privileges").

SSEEEE AALLSSOO
       ddaattee(1),  ggeettttiimmeeooffddaayy(2),  sseettttiimmeeooffddaayy(2),  ttiimmee(2), aaddjjttiimmee(3), cclloocckk__ggeettccppuucclloocckkiidd(3), ccttiimmee(3), ffttiimmee(3),
       pptthhrreeaadd__ggeettccppuucclloocckkiidd(3), ssyyssccoonnff(3), ttiimmee(7), vvddssoo(7), hhwwcclloocckk(8)

CCOOLLOOPPHHOONN
       This page is part of release 5.05 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the  project,  information
       about    reporting    bugs,    and    the    latest    version    of    this    page,    can   be   found   at
       https://www.kernel.org/doc/man-pages/.

                                                      2019-03-06                                      CLOCK_GETRES(2)
